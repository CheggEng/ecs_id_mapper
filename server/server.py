from flask import Flask, request, redirect, jsonify, abort
from werkzeug.exceptions import NotFound
import db
import logging
import copy
import settings
import new_relic_url_generator
import ecs_api

ecs_id_mapper = Flask(__name__)
logger = logging.getLogger('ecs_id_mapper')



@ecs_id_mapper.route('/report/event', methods=['POST'])
def report_event():
    """
    update DB with new container task state change event
    :return: str. 'true' if successful
    """
    if not request.json:
        logger.error('received non-json data')
        abort(400)
    logger.info('Received event from {}'.format(request.remote_addr))
    logger.debug('Event payload {}'.format(request.json))
    event_id = request.json['event_id']
    event = request.json['event']
    timestamp = request.json['timestamp']
    db.put(str(timestamp)+"_"+str(event_id),
           {'container_id': event_id, 'event_action': event, 'timestamp': timestamp},
           'ecs_id_mapper_events')
    return 'true'


@ecs_id_mapper.route('/report/map', methods=['POST'])
def report_map():
    """
    update DB with new version of a container instance's id map
    :return: str. 'true' if successful
    """
    if not request.json:
        logger.error('received non-json data')
        abort(400)
    logger.info('Received map update from {}'.format(request.remote_addr))
    logger.debug('Map update {}'.format(request.json))
    _map = request.json

    for k,v in _map.iteritems():
        container_attributes = copy.deepcopy(v)
        try:
            container_attributes['cadvisor_url'] = \
                "http://{}:9070/docker/{}".format(
                container_attributes['instance_ip'],
                container_attributes['container_id'])
            container_attributes['graylog_url'] = \
                settings.graylog_url.format(graylog_fqdn=settings.graylog_fqdn,
                                            container_id=container_attributes['container_id'][:12])
        except KeyError as e:
            logger.error('Unable to find keys in response: {}'.format(e))
        _map[k] = container_attributes
    db.batch_put(_map, 'ecs_id_mapper_hash')
    return 'true'


@ecs_id_mapper.route('/query/container_id/<container_id>', methods=['GET'])
def get_container_by_container_id(container_id):
    """
    lookup task id based on matching container id
    :param container_id: str. container_id is a unique string generated by the docker daemon
    for each instance of a container
    :return: str. task id
    """
    if len(container_id) <= 12:
        query = 'select * from `{schema}` where container_id like "{short_container_id}%"'.\
            format(schema=settings.hash_schema, short_container_id=container_id)
    else:
        query = 'select * from `{schema}` where container_id="{container_id}"'.\
            format(schema=settings.hash_schema, container_id=container_id)
    resultset = db.search_domain(query, settings.hash_schema)
    try:
        return resultset.next()['task_id']
    except StopIteration:
        abort(404)


@ecs_id_mapper.route('/query/container_id/<container_id>/_all', methods=['GET'])
def get_all_container_attributes_by_container_id(container_id):
    """
    lookup all attributes a container has by its container id
    :param container_id: str. container_id is a unique string generated by the docker daemon
    for each instance of a container
    :return: str. json encoded
    """
    if len(container_id) <= 12:
        query = 'select * from `{schema}` where container_id like "{short_container_id}%"'.\
            format(schema=settings.hash_schema, short_container_id=container_id)
    else:
        query = 'select * from `{schema}` where container_id="{container_id}"'.\
            format(schema=settings.hash_schema, container_id=container_id)
    resultset = db.search_domain(query, settings.hash_schema)
    json_results = {}
    logger.debug(resultset)
    for result in resultset:
        for k,v in result.iteritems():
            json_results[k] = v
    if len(json_results) == 0:
        abort(404)
    return jsonify(json_results)


@ecs_id_mapper.route('/query/container_id/<container_id>/cadvisor', methods=['GET'])
def get_cadvisor_url_by_container_id(container_id):
    """
    Get the cadvisor URL for a given container
    :param container_id: str. container_id is a unique string generated by the docker
    daemon for each instance of a container
    :return: str.
    """
    if len(container_id) <= 12:
        query = 'select * from `{schema}` where container_id like "{short_container_id}%"'.\
            format(schema=settings.hash_schema, short_container_id=container_id)
    else:
        query = 'select * from `{schema}` where container_id="{container_id}"'.\
            format(schema=settings.hash_schema, container_id=container_id)
    resultset = db.search_domain(query, settings.hash_schema)
    try:
        d = resultset.next()
        instance_ip = d['instance_ip']
        cadvisor_url = "http://{}:{}/docker/{}".format(instance_ip, settings.cadvisor_port, container_id)
        if request.args.get('redir') and request.args.get('redir').lower() == "true":
            return redirect(cadvisor_url, 302)
        else:
            return cadvisor_url
    except StopIteration:
        abort(404)


@ecs_id_mapper.route('/query/container_id/<container_id>/urls', methods=['GET'])
def get_all_container_urls(container_id):
    """
    get a list of all URLs we have relating to a container
    :param container_id: str. container_id
    :return: json
    """
    if len(container_id) <= 12:
        query = 'select * from `{schema}` where container_id like "{short_container_id}%"'.\
            format(schema=settings.hash_schema, short_container_id=container_id)
    else:
        query = 'select * from `{schema}` where container_id="{container_id}"'.\
            format(schema=settings.hash_schema, container_id=container_id)
    resultset = db.search_domain(query, settings.hash_schema)
    json_results = {}
    logger.debug(resultset)
    for result in resultset:
        for k,v in result.iteritems():
            json_results[k] = v
    return jsonify(json_results)


@ecs_id_mapper.route('/query/task_id/<task_id>', methods=['GET'])
def get_container_by_task_id(task_id):
    """
    lookup container id based on matching task id
    :param task_id: str. Task id is a uuid like string generated by ECS for each instance of a task
    :return: str. container id
    """
    resultset = db.search_domain(
        'select * from `ecs_id_mapper_hash` where task_id="{task_id}"'.
        format(task_id=task_id), 'ecs_id_mapper_hash')
    try:
        return resultset.next()['container_id']
    except StopIteration:
        abort(404)


@ecs_id_mapper.route('/query/task_id/<task_id>/_all', methods=['GET'])
def get_all_container_attributes_by_task_id(task_id, json=True):
    """
    lookup all attributes a container has by its task_id
    :param task_id: str. Task id is a uuid like string generated by ECS for each instance of a task
    :param json: bool. return a serialized json response (true) or a dict (false)
    :return: str. json encoded
    """
    resultset = db.search_domain(
            'select * from `ecs_id_mapper_hash` where task_id="{task_id}"'.
            format(task_id=task_id), 'ecs_id_mapper_hash')
    json_results = {}
    logger.debug(resultset)
    for result in resultset:
        for k,v in result.iteritems():
            json_results[k] = v
    if len(json_results) == 0:
        abort(404)
    if json:
        return jsonify(json_results)
    return json_results


@ecs_id_mapper.route('/query/task_id/<task_id>/cadvisor', methods=['GET'])
def get_cadvisor_url_by_task_id(task_id):
    """
    Get the cadvisor URL for a given container
    :param task_id: Task id is a uuid like string generated by ECS for each instance of a task
    :return: str.
    """
    resultset = db.search_domain(
            'select * from `ecs_id_mapper_hash` where task_id="{task_id}"'.
            format(task_id=task_id), 'ecs_id_mapper_hash')
    try:
        d = resultset.next()
        instance_ip = d['instance_ip']
        container_id = d['container_id']
        cadvisor_url = "http://{}:{}/docker/{}".format(instance_ip, settings.cadvisor_port, container_id)
        if request.args.get('redir') and request.args.get('redir').lower() == "true":
            return redirect(cadvisor_url, 302)
        else:
            return cadvisor_url
    except StopIteration:
        abort(404)


@ecs_id_mapper.route('/query/task_id/<task_id>/graylog', methods=['GET'])
def get_graylog_url_by_task_id(task_id):
    """
    Get the graylog URL for a given container
    :param  task_id: Task id is a uuid like string generated by ECS for each instance of a task
    :return: str.
    """
    resultset = db.search_domain(
            'select * from `ecs_id_mapper_hash` where task_id="{task_id}"'.
            format(task_id=task_id), 'ecs_id_mapper_hash')
    try:
        d = resultset.next()
        graylog_url = d['graylog_url']
        if request.args.get('redir') and request.args.get('redir').lower() == "true":
            return redirect(graylog_url, 302)
        else:
            return graylog_url
    except StopIteration:
        abort(404)


@ecs_id_mapper.route('/query/task_id/<task_id>/newrelic', methods=['GET'])
def get_newrelic_url_by_task_id(task_id):
    """
    Get the new relic URL for a given container. This will be the app instance specific URL for new relic
    :param  task_id: Task id is a uuid like string generated by ECS for each instance of a task
    :return: str.
    """
    resultset = db.search_domain(
            'select * from `ecs_id_mapper_hash` where task_id="{task_id}"'.
            format(task_id=task_id), 'ecs_id_mapper_hash')
    try:
        d = resultset.next()
        new_relic_url = d['new_relic_url']
        if request.args.get('redir') and request.args.get('redir').lower() == "true":
            return redirect(new_relic_url, 302)
        else:
            return new_relic_url
    except StopIteration:
        abort(404)
    except KeyError:
        # We don't have the new relic url yet
        try:
            logger.info('NR URL not found in DB. Querying NR API')
            new_relic_url = new_relic_url_generator.get_new_relic_app_instance_url(d['container_id'])
            db.put(d.name, {"new_relic_url": new_relic_url}, settings.hash_schema, replace=True)
            if request.args.get('redir') and request.args.get('redir').lower() == "true":
                return redirect(new_relic_url, 302)
            else:
                return new_relic_url
        except KeyError:
            logger.error('Unable to find container id for task_id {}'.format(task_id))
            abort(404, 'Unable to find container id for task_id {}'.format(task_id))
        except new_relic_url_generator.NewRelicAPIException:
            logger.error('Invalid response from New Relic API')
            abort(404, 'Unable to find New Relic app for that container/service.')


@ecs_id_mapper.route('/query/service/<cluster_name>/<service_name>/newrelic')
def get_newrelic_url_by_service(cluster_name, service_name):
    """
    Get new relic app URL for a service
    :param cluster_name: str. name of the cluster that the service is in
    :param service_name: str. name of service to look up
    :return: URL of new relic app, or 302 redir to URL
    """
    try:
        new_relic_url = new_relic_url_generator.get_new_relic_service_url(service_name, cluster_name)
    except new_relic_url_generator.NewRelicAPIException:
        abort(404, 'Unable to find New Relic app for that container/service')
    if request.args.get('redir') and request.args.get('redir').lower() == "true":
        return redirect(new_relic_url, 302)
    else:
        return new_relic_url


@ecs_id_mapper.route('/query/service/<cluster_name>/<service_name>/_all')
def get_all_service_attributes(cluster_name, service_name):
    """
    Get all information for a service
    :param cluster_name: str. name of the cluster that the service is in
    :param service_name: str. name of service to look up
    :return: json
    """
    service = {"service_name": service_name,
               "cluster_name": cluster_name,
               "tasks": []}
    try:
        for task in ecs_api.get_task_ids_from_service(service_name, cluster_name):
            try:
                task_json = get_all_container_attributes_by_task_id(task, json=False)
                service['tasks'].append(task_json)
            except NotFound as e:
                logger.warn('ECS API told us about task {} but unable to find in our database'.
                            format(task))
        return jsonify(service)
    except:
        abort(404, 'ECS service not found')


@ecs_id_mapper.route('/query/events/<task_name>', methods=['GET'])
def get_events_by_task_name(task_name):
    """
    Get the graylog URL for a given container
    :param  task_name: This is the name of the task as defined in the task ECS Task Definition
    """

    resultset=db.search_domain(
            'select * from `ecs_id_mapper_hash` where task_name="{task_name}"'.
            format(task_name=task_name), 'ecs_id_mapper_hash')
    try:
        d = resultset.next()
        contiainer_id = d['contianer_id']
        print contiainer_id
    except StopIteration:
        abort(404)

    resultset = db.search_domain(
            'select * from `ecs_id_mapper_events` where container_id="{contiainer_id}"'.
            format(contiainer_id=contiainer_id), 'ecs_id_mapper_events')
    try:
        d = resultset.next()
        return d
    except StopIteration:
        abort(404)


@ecs_id_mapper.route('/health')
def check_health():
    try:
        db.list_domains()
        return "All systems go!"
    except:
        abort(500)


if __name__ == '__main__':
    # This starts the built in flask server, not designed for production use
    logger.info('Starting server...')
    ecs_id_mapper.run(debug=False, host='0.0.0.0', port=5001)